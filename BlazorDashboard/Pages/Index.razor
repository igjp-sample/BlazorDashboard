@page "/"
@using System.Data
@using Blazored.LocalStorage
@using static BlazorDashboard.Components.DashboardMenu
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject DashboardService DashboardService
@inject ILocalStorageService LocalStorage
@inject DockManagerHelper Helper

<PageTitle>Blazor Dashboard</PageTitle>

<Header OnClickAddComponent="OnClickAddComponent" />

<div class="page-main @(this.DisplayReady ? "ready" : "")">
    <IgbDockManager id="dockmanager1" Layout="this._InitialLayout">
        @foreach (var component in this.Components)
        {
            <div @key="component.Id" slot="@component.Id" class="dockmanager-content">
                @if (component.ComponentName == nameof(DashboardMenu))
                {
                    <DashboardMenu OnSelectedItemCallback="OnSelectedDashboard"></DashboardMenu>
                }
                @if (component.ComponentName == nameof(GridView))
                {
                    <GridView GridDataTable="@SelectedDataTable"></GridView>
                }
                @if (component.ComponentName == nameof(ChartView))
                {
                    <ChartView DataTable="@SelectedDataTable"></ChartView>
                }
            </div>
        }
    </IgbDockManager>
</div>

@code {
    private bool DisplayReady = false;

    private DataTable? SelectedDataTable;

    /// <summary>
    /// 最後に購読破棄するために、ドックマネージャーのイベント購読を保持するリスト
    /// </summary>
    private readonly List<IAsyncDisposable> _Subscriptions = new();

    public record ComponentDescriptor(string Id, string HeaderText, string ComponentName);

    /// <summary>
    /// "画面上にどのコンポーネントが表示されているか" を保持するリスト
    /// </summary>
    private readonly List<ComponentDescriptor> Components = new();

    /// <summary>
    /// 初期リスト
    /// </summary>
    private readonly IEnumerable<ComponentDescriptor> _InitialComponents = new ComponentDescriptor[]
    {
        new(Id:"content1", "データソース", ComponentName:nameof(DashboardMenu)),
        new(Id:"content2", "データグリッド", ComponentName:nameof(GridView)),
        new(Id:"content3", "チャート", ComponentName:nameof(ChartView)),
    };

#pragma warning disable BL0005
    /// <summary>
    /// ドックマネージャーの初期レイアウト
    /// </summary>
    private readonly IgbDockManagerLayout _InitialLayout = new IgbDockManagerLayout
        {
            RootPane = new IgbSplitPane
            {
                PaneType = DockManagerPaneType.SplitPane,
                Orientation = SplitPaneOrientation.Horizontal,
                Panes = new IgbDockManagerPaneCollection
                {
                    new IgbContentPane
                    {
                        PaneType = DockManagerPaneType.ContentPane,
                        ContentId = "content1",
                        Header = "データソース",
                        Size = 25
                    },
                    new IgbSplitPane
                    {
                        PaneType = DockManagerPaneType.SplitPane,
                        Orientation = SplitPaneOrientation.Vertical,
                        Size = 75,
                        Panes = new IgbDockManagerPaneCollection
                        {
                            new IgbContentPane
                            {
                                PaneType = DockManagerPaneType.ContentPane,
                                ContentId = "content2",
                                Header = "データグリッド",
                                Size = 100
                            },
                            new IgbContentPane
                            {
                                PaneType = DockManagerPaneType.ContentPane,
                                ContentId = "content3",
                                Header = "チャート",
                                Size = 200
                            }
                        }
                    }
                }
            }
        };
#pragma warning restore BL0005

    /// <summary>
    /// ダッシュボード選択時に呼び出されます。
    /// </summary>
    private void OnSelectedDashboard(MenuSelectedEventArgs e)
    {
        this.SelectedDataTable = e.SelectedItem.DataTable;
    }

    /// <summary>
    /// 描画が完了するたびに呼び出されます (以降、ローカルストレージへのアクセスが可能になります)
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ブラウザのローカルストレージに JSON 形式で保存しておいた表示コンポーネントの情報を、逆シリアル化して復元
            var components = await this.LocalStorage.GetItemAsync<ComponentDescriptor[]>("BlazorDashboard/components");
            this.Components.AddRange(components ?? _InitialComponents);
            this.StateHasChanged();

            // ブラウザのローカルストレージに保存しておいたドックマネージャーのレイアウト情報から、レイアウトを復元
            var layout = await this.LocalStorage.GetItemAsStringAsync("BlazorDashboard/layout");
            if (!string.IsNullOrEmpty(layout)) await this.Helper.RestoreLayoutAsync("#dockmanager1", layout);

            // ドックマネージャーが発行するイベントを購読
            this._Subscriptions.Add(await this.Helper.SubscribeLayoutChangeEventAsync("#dockmanager1", OnLayoutChange));
            this._Subscriptions.Add(await this.Helper.SubscribePaneCloseEventAsync("#dockmanager1", OnPaneClose));

            this.DisplayReady = true;
            this.StateHasChanged();
        }
    }

    private async Task OnClickAddComponent(string componentName)
    {
        var id = Guid.NewGuid().ToString();
        var descriptor = componentName switch
        {
            nameof(DashboardMenu) => new ComponentDescriptor(id, "データソース", componentName),
            nameof(GridView) => new ComponentDescriptor(id, "データグリッド", componentName),
            nameof(ChartView) => new ComponentDescriptor(id, "チャート", componentName),
            _ => throw new Exception()
        };
        await this.AddComponentAsync(descriptor);
    }

    /// <summary>
    /// 表示コンポーネントの追加処理を集約します。
    /// </summary>
    private async ValueTask AddComponentAsync(ComponentDescriptor descriptor)
    {
        this.Components.Add(descriptor);

        // ドックマネージャーに、追加した表示コンポーネントを取り付け
        await this.Helper.AttachContentPaneAsync("#dockmanager1", descriptor.Id, descriptor.HeaderText);

        // 表示コンポーネントの情報を、ブラウザのローカルストレージに保存
        await this.LocalStorage.SetItemAsync("BlazorDashboard/components", this.Components);
    }

    /// <summary>
    /// ドックマネージャーのレイアウトが変更されたときに呼び出され、変更後のレイアウト情報をブラウザのローカルストレージに保存します。
    /// </summary>
    private async ValueTask OnLayoutChange(string? layout)
    {
        if (layout == null) return;
        await this.LocalStorage.SetItemAsStringAsync("BlazorDashboard/layout", layout);
    }

    /// <summary>
    /// ドックマネージャーのペインが閉じられたときに呼び出され、閉じられたペインに表示していた表示コンポーネントを削除し、ブラウザのローカルストレージに保存します。
    /// </summary>
    private async ValueTask OnPaneClose(string[]? closedPaneIds)
    {
        var componentsToRemove = (closedPaneIds ?? Array.Empty<string>())
            .Select(paneId => this.Components.Find(descriptor => descriptor.Id == paneId))
            .Where(descriptor => descriptor != null)
            .ToArray();
        foreach (var descriptor in componentsToRemove) { this.Components.Remove(descriptor!); }

        await LocalStorage.SetItemAsync("BlazorDashboard/components", this.Components);
        this.StateHasChanged();
    }

    /// <summary>
    /// このコンポーネントが破棄されるときに呼び出され、購読していたドックマネージャーのイベント購読を破棄します。
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        var valueTasks = this._Subscriptions.Select(subscription => subscription.DisposeAsync()).ToArray();
        foreach (var valueTask in valueTasks) await valueTask;
    }
}