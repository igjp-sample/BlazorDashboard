@using System.Data
@using BlazorDashboard.Services
@implements IAsyncDisposable
@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div>
    <label class="options-label">Category Type: </label>
    <select value=@SeriesType @onchange="OnSeriesTypeChanged">
        <option>Column</option>
        <option>Area</option>
        <option>Point</option>
        <option>Line</option>
        <option>Spline</option>
        <option>Spline Area</option>
        <option>Step Area</option>
        <option>Step Line</option>
        <option>Waterfall</option>
    </select>

    <span class="legend-title">X軸: </span>
    <select @bind="XColumn">
        @foreach (var column in ColumnsX)
        {
            <option>@column</option>
        }
    </select>

    <span class="legend-title">Y軸: </span>
    <select @bind="YColumn">
        @foreach (var column in ColumnsY)
        {
            <option>@column</option>
        }
    </select>
</div>

<div @ref="DataChartContainerRef" class="dataChartStyle">

    <IgbDataChart Height="100%" Width="100%"
                  TitleTopMargin="10"
                  IsHorizontalZoomEnabled="true"
                  IsVerticalZoomEnabled="true">

        <IgbCategoryXAxis Name="xAxis" Label="@XColumn" Title="@XColumn" />
        <IgbNumericYAxis Name="yAxis" Title="@YColumn" TitleLeftMargin="10" MinimumValue="0" />

        @if (SeriesType == "Column")
        {
            <IgbColumnSeries Name="series1"
                         ValueMemberPath="@YColumn"
                         Title="@YColumn"
                         XAxisName="xAxis"
                         YAxisName="yAxis">
            </IgbColumnSeries>
        }

        @if (SeriesType == "Line")
        {
            <IgbLineSeries Name="series1"
                       ValueMemberPath="@YColumn"
                       Title="@YColumn"
                       XAxisName="xAxis"
                       YAxisName="yAxis">
            </IgbLineSeries>
        }

        @if (SeriesType == "Area")
        {
            <IgbAreaSeries Name="series1"
                       ValueMemberPath="@YColumn"
                       Title="@YColumn"
                       XAxisName="xAxis"
                       YAxisName="yAxis">
            </IgbAreaSeries>
        }

        @if (SeriesType == "Point")
        {
            <IgbPointSeries Name="series1"
                        ValueMemberPath="@YColumn"
                        Title="@YColumn"
                        XAxisName="xAxis"
                        YAxisName="yAxis">
            </IgbPointSeries>
        }

        @if (SeriesType == "Spline")
        {
            <IgbSplineSeries Name="series1"
                         ValueMemberPath="@YColumn"
                         Title="@YColumn"
                         XAxisName="xAxis"
                         YAxisName="yAxis">
            </IgbSplineSeries>
        }

        @if (SeriesType == "Spline Area")
        {
            <IgbSplineAreaSeries Name="series1"
                             ValueMemberPath="@YColumn"
                             Title="@YColumn"
                             XAxisName="xAxis"
                             YAxisName="yAxis">
            </IgbSplineAreaSeries>
        }

        @if (SeriesType == "Step Area")
        {
            <IgbStepAreaSeries Name="series1"
                           ValueMemberPath="@YColumn"
                           Title="@YColumn"
                           XAxisName="xAxis"
                           YAxisName="yAxis">
            </IgbStepAreaSeries>
        }

        @if (SeriesType == "Step Line")
        {
            <IgbStepLineSeries Name="series1"
                           ValueMemberPath="@YColumn"
                           Title="@YColumn"
                           XAxisName="xAxis"
                           YAxisName="yAxis">
            </IgbStepLineSeries>
        }

        @if (SeriesType == "Waterfall")
        {
            <IgbWaterfallSeries Name="series1"
                            ValueMemberPath="@YColumn"
                            Title="@YColumn"
                            XAxisName="xAxis"
                            YAxisName="yAxis">
            </IgbWaterfallSeries>
        }

    </IgbDataChart>

</div>

@if (DataTable == null)
{
    <div class="overlay">
        <span class="overlayTitle">
            データを選択してください
        </span>
    </div>
}

@code {

    [Parameter]
    public DataTable? DataTable { get; set; }

    private List<string> ColumnsY = new List<string>();

    private List<string> ColumnsX = new List<string>();

    private string SeriesType = "Column";

    private string? XColumn;

    private string? YColumn;

    private IJSObjectReference? JSModule;

    private ElementReference DataChartContainerRef;

    protected override void OnInitialized()
    {
        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartVerticalCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var prevDataTable = this.DataTable;
        await base.SetParametersAsync(parameters);
        if (!object.ReferenceEquals(prevDataTable, this.DataTable))
        {
            await this.SetupDataChartAsync();
        }
    }

    private async ValueTask SetupDataChartAsync()
    {
        if (this.DataTable == null) return;

        var newColumnsY = new List<string>();
        foreach (DataColumn column in this.DataTable.Columns)
        {
            if (column.DataType == typeof(int)
                || column.DataType == typeof(double)
                || column.DataType == typeof(decimal))
            {
                newColumnsY.Add(column.ColumnName);
            }
        }

        var newColumnsX = new List<string>();
        foreach (DataColumn column in this.DataTable.Columns)
        {
            newColumnsX.Add(column.ColumnName);
        }

        this.ColumnsY = newColumnsY;
        this.ColumnsX = newColumnsX;
        if (string.IsNullOrEmpty(this.XColumn))
        {
            if (newColumnsX.Count > 0)
            {
                this.XColumn = newColumnsX[0];
            }
        }

        if (string.IsNullOrEmpty(this.YColumn))
        {
            if (newColumnsY.Count > 0)
            {
                if (newColumnsY[0] == newColumnsX[0]
                    && newColumnsY.Count > 1)
                {
                    this.YColumn = newColumnsY[1];
                }
                else
                {
                    this.YColumn = newColumnsY[0];
                }
            }
        }

        if (string.IsNullOrEmpty(SeriesType))
        {
            this.SeriesType = "Column";
            this.StateHasChanged();
        }

        var jsonData = JsonSerializer.Serialize(this.DataTable.AsDictionaryEnumerable());
        var module = await this.GetJsModuleAsync();
        await module.InvokeVoidAsync("setDataSource", this.DataChartContainerRef, jsonData);

        this.StateHasChanged();
    }

    public async Task OnSeriesTypeChanged(ChangeEventArgs e)
    {
        this.SeriesType = e.Value?.ToString() ?? "Column";
        await SetupDataChartAsync();
    }

    private async ValueTask<IJSObjectReference> GetJsModuleAsync()
    {
        if (this.JSModule == null)
        {
            this.JSModule = await this.JS.InvokeAsync<IJSObjectReference>("import", "./Components/ChartView.razor.js");
        }
        return this.JSModule;
    }

    public async ValueTask DisposeAsync()
    {
        if (this.JSModule != null) await this.JSModule.DisposeAsync();
    }
}