@using System.Data
@implements IAsyncDisposable
@inject IJSRuntime JS;

<div @ref="DataGridContainerRef" class="data-grid-area">
    <IgbDataGrid Height="100%"
                 Width="100%"
                 EditMode="EditModeType.None"
                 AutoGenerateColumns="true">
    </IgbDataGrid>
</div>

@if (GridDataTable == null)
{
    <div class="overlay">
        <span class="overlay-title">
            データを選択してください
        </span>
    </div>
}

@code {

    [Parameter]
    public DataTable? GridDataTable { get; set; }

    private IJSObjectReference? JSModule;
    
    private ElementReference DataGridContainerRef;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var prevDataTable = this.GridDataTable;
        await base.SetParametersAsync(parameters);
        if (!object.ReferenceEquals(prevDataTable, this.GridDataTable))
        {
            var jsonData = JsonSerializer.Serialize(this.GridDataTable.AsDictionaryEnumerable());
            var module = await this.GetJsModuleAsync();
            await module.InvokeVoidAsync("setDataSource", this.DataGridContainerRef, jsonData);
        }
    }

    private async ValueTask<IJSObjectReference> GetJsModuleAsync()
    {
        if (this.JSModule == null)
        {
            this.JSModule = await this.JS.InvokeAsync<IJSObjectReference>("import", "./Components/GridView.razor.js");
        }
        return this.JSModule;
    }

    public async ValueTask DisposeAsync()
    {
        if (this.JSModule != null) await this.JSModule.DisposeAsync();
    }
}
