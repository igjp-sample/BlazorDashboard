@using System.IO
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using Infragistics.Documents.Excel
@using Microsoft.JSInterop.WebAssembly
@using Toolbelt.Blazor.FileDropZone
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject DashboardService DashboardService

<div class="dashboard-menu-container">

    <FileDropZone class="drop-zone">

        <div @ref="FileSelectorRef" class="fileUploadRegion">
            <InputFile OnChange="@LoadFiles" style="display:none;" />
            <IgbButton Class="file-selector-button" Variant="ButtonVariant.Contained" @onclick="OnClickSelectFile">
                ファイル選択
            </IgbButton>
            <p class="guide-message">又はここにファイルをドラッグ & ドロップ</p>
        </div>

        <ul class="dashboardList">
            @if (this.Items != null)
            {
                foreach (var item in this.Items)
                {
                    <li @key="item.ID" class="dashboardItem @(ActiveItem == item ? "dashboardItemActive" : "")" @onclick="(s => OnItemSelected(item))">
                        @item.Title
                    </li>
                }
            }
        </ul>

        @if (this.IsLoading == true)
        {
            <div class="progressStyle">
                <p class="progressMessage">
                    データを設定中です
                </p>
                <IgbLinearProgress Variant="ProgressBaseVariant.Primary" Indeterminate="true" />
            </div>
        }

    </FileDropZone>
</div>

@code {

    [Parameter]
    public EventCallback<MenuSelectedEventArgs> OnSelectedItemCallback { get; set; }

    private ObservableCollection<DashboardItem>? Items;

    public DashboardItem? ActiveItem;

    private const long MaxFileSize = 1024 * 15;

    private const int MaxAllowedFiles = 3;

    private bool IsLoading;

    private ElementReference FileSelectorRef;

    private IJSObjectReference? JSModule;

    protected override void OnInitialized()
    {
        Workbook.InProcessRuntime = (IJSInProcessRuntime)this.JS;
        this.Items = this.DashboardService.Items;
    }

    private async ValueTask<IJSObjectReference> GetJSModuleAsync()
    {
        if (this.JSModule == null)
        {
            this.JSModule = await this.JS.InvokeAsync<IJSObjectReference>("import", "./Components/DashboardMenu.razor.js");
        }
        return this.JSModule;
    }

    private async Task OnClickSelectFile()
    {
        var module = await this.GetJSModuleAsync();
        await module.InvokeVoidAsync("onClickSelectFile", FileSelectorRef);
    }

    private void OnItemSelected(DashboardItem item)
    {
        this.OnSelectedItemCallback.InvokeAsync(new(item));
        this.ActiveItem = item;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        this.IsLoading = true;
        this.StateHasChanged();
        await Task.Delay(200);

        try
        {
            foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
            {
                try
                {
                    var buffers = new byte[file.Size];
                    await file.OpenReadStream().ReadAsync(buffers);
                    DashboardService.AddDashboardItem(file.Name, buffers);
                    this.StateHasChanged();
                    await Task.Delay(200);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.StackTrace);
                }
            }
        }
        finally
        {
            this.IsLoading = false;
            if (this.Items != null)
            {
                this.OnItemSelected(this.Items.Last());
            }
            this.StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (this.JSModule != null) await this.JSModule.DisposeAsync();
    }

    public class MenuSelectedEventArgs : EventArgs
    {
        public DashboardItem SelectedItem { get; }

        public MenuSelectedEventArgs(DashboardItem selectedItem)
        {
            this.SelectedItem = selectedItem;
        }
    }
}
